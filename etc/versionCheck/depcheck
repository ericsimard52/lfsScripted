export LC_ALL=C

bashInstalled=`bash --version | head -n1 | cut -d" " -f2-4 | egrep -o "[0-9].{3}"`
binutilsInstalled=`ld --version | head -n1 | cut -d" " -f3- | egrep -o "[0-9].{3}"`
bisonInstalled=`bison --version | head -n1 |egrep -o "[0-9].{3,}"`
bzip2Installed=`bzip2 --version 2>&1 < /dev/null | head -n1 | cut -d" " -f1,6- |egrep -o "[0-9].[0-9].[0-9]"`
diffInstalled=`diff --version | head -n1 | egrep -o "[0-9].[0-9]"`
findInstalled=`find --version | head -n1 | egrep -o "[0-9].{3,}"`
gawkInstalled=`gawk --version | head -n1 | egrep -o "[0-9].[0-9].[0-9]" |head -n1`
gccInstalled=`gcc --version | head -n1 | egrep -o "[0-9].[0-9].[0-9]"`
glibcInstalled=`ldd --version | head -n1 | egrep -o "[0-9].[0-9][0-9]"`
grepInstalled=`grep --version | head -n1 |egrep -o "[0-9].{2}"`
gzipInstalled=`gzip --version | head -n1 | egrep -o "[0-9].{1,}"`
m4Installed=`m4 --version | head -n1 | egrep -o "[0-9].[0-9].[0-9]{1,}"`
makeInstalled=`make --version | head -n1 | egrep -o "[0-9].{1,}"`
patchInstalled=`patch --version | head -n1 | egrep -o "[0-9].{3,}"`
perlInstall=`perl -V:version | egrep -o "([0-9].{5})"`
sedInstalled=`sed --version | head -n1| egrep -o "[0-9].{1,}"`
tarInstalled=`tar --version | head -n1 |egrep -o "[0-9].{2,}"`
makeinfoInstalled=`egrep -o "[0-9].[0-9]" < <(makeinfo --version | head -n1)`
xzInstalled=`xz --version | head -n1 | egrep -o "[0-9].{4}"`
coreutilsInstalled=`chown --version | head -n1 | cut -d")" -f2`

declare -a reqList=('bash' 'ld' 'bison' 'bzip2' 'diff' 'find' 'gawk' 'gcc' 'ldd' 'grep' 'gzip' 'm4' 'make' 'patch' 'perl' 'sed' 'tar' 'makeinfo' 'xz' 'chown')
declare -a reqVer=('3.2' '2.25' '2.7' '1.0.4' '2.8.1' '4.2.31' '4.0.1' '4.9' '2.11' '2.5.1a' '1.3.12' '1.4.10' '4.0' '2.5.4' '5.8.8' '4.1.5' '1.2.2' '4.7' '5.0.0' '6.9')
declare -a reqInst=("${bashInstalled}" "${binutilsInstalled}" "${bisonInstalled}" "${bzip2Installed}" "${diffInstalled}" "${findInstalled}" "${gawkInstalled}" "${gccInstalled}" "${glibcInstalled}" "${grepInstalled}" "${gzipInstalled}" "${m4Installed}" "${makeInstalled}" "${patchInstalled}" "${perlInstall}" "${sedInstalled}" "${tarInstalled}" "${makeinfoInstalled}" "${xzInstalled}" "${coreutilsInstalled}")
v=0
reqLen=${#reqList[@]}
while [ $v -lt $reqLen ]; do
    log "GEN|INFO|Checking if ${reqList[$v]} is installed." t
    checkInstalled "${reqList[$v]}"
    if [[ $? > 0 ]]; then
        log "GEN|ERROR|Could not find it." t
    else
        log "GEN|INFO|Found it. Checking Version."
        vercomp "${reqInst[$v]}" "${reqVer[$v]}"
        if [[ $? > 0 ]]; then
            log "GEN|ERROR|Error,${reqList[$v]}  version is no good, I found ${reqInst[$v]}, ${reqVer[$v]} needed." t
        else
            log "GEN|INFO|${reqList[$v]} OK!" t
        fi
    fi
    ((v++))
done

MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -> $MYSH"
echo $MYSH | grep -q bash || log "GEN|ERROR|ERROR: /bin/sh does not point to bash"
unset MYSH



linuxVer=`cat /proc/version |egrep -o "[0-9].[0-9][0-9].[0-9]" |head -n1`
linuxReq="3.2"
vercomp "$linuxVer" "$linuxReq"
if [[ $? > 0 ]]; then
    log "GEN|ERROR|Linux version too old. Found: $linuxVer, required: $linuxReq" t
else
    log "GEN|INFO|Linux version OK!." t
fi

if [ -h /usr/bin/yacc ]; then
    log "GEN|INFO|/usr/bin/yacc -> `readlink -f /usr/bin/yacc`" t
elif [ -x /usr/bin/yacc ]; then
    log "GEN|INFO|yacc is `/usr/bin/yacc --version | head -n1`" t
else
    log "GEN|ERROR|yacc not found" t
fi


if [ -h /usr/bin/awk ]; then
    awkLink="/usr/bin/awk -> `readlink -f /usr/bin/awk`"
    if [[ "$awkLink" = "/usr/bin/awk -> /usr/bin/gawk" ]]; then
        log "GEN|INFO|awk is symlink to gawk, good!" t
    else
        log "GEN|ERROR|awk $awkLink, should point to gawk." t
    fi
elif [ -x /usr/bin/awk ]; then
    awkInstalled=`/usr/bin/awk --version | head -n1`
    vercomp "$awkInstalled" "4.0.1"
    if [[ $? > 0 ]]; then
        log "GEN|ERROR|Error,awk  version is no good, I found $awkInstalled, 4.0.1 needed." t
    else
        log "GEN|INFO|awk is a link to gawk and version is good!" t
    fi
else
    log "GEN|ERROR|awk not found" t
fi

echo 'int main(){}' > dummy.c && g++ -o dummy dummy.c
if [ -x dummy ];then
    log "GEN|INFO|g++ compilation OK" t
else
    log "GEN|ERROR|g++ compilation failed"
fi
processCmd "rm -fv dummy.c dummy"
